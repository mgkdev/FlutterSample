name: Flutter CD

on:
  workflow_dispatch:
    inputs:
      run_check:
        description: "Run: Check"
        type: boolean
        default: true
      run_build_android:
        description: "Run: Build for Android"
        type: boolean
        default: true
      run_build_ios:
        description: "Run: Build for iOS"
        type: boolean
        default: true
      run_build_web:
        description: "Run: Build for Web"
        type: boolean
        default: true
      run_build_windows:
        description: "Run: Build for Windows"
        type: boolean
        default: true
      run_build_linux:
        description: "Run: Build for Linux"
        type: boolean
        default: true
      run_build_macos:
        description: "Run: Build for macOS"
        type: boolean
        default: true
      build_number:
        description: "Build Number (ex. 123)"
        type: string
      build_name:
        description: "Build Name (ex. 1.2.3)"
        type: string
      obfuscation:
        description: "Obfuscation"
        type: boolean
        default: true

permissions:
  contents: read
  actions: read

env:
  # https://docs.flutter.dev/release/archive
  FLUTTER_VERSION: "3.16.9"
  FLUTTER_BUILD_ARGS: >-
    ${{ inputs.build_number != '' && format('--build-number {0}', inputs.build_number) || '' }}
    ${{ inputs.build_name != '' && format('--build-name {0}', inputs.build_name) || '' }}

jobs:
  check:
    name: "Check"
    if: inputs.run_check

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Check
        uses: ./.github/actions/check

  build_android:
    name: "Build for Android"
    needs: check
    if: (!cancelled() && !failure()) && inputs.run_build_android

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Build for Android
        uses: ./.github/actions/build_android
        with:
          obfuscation: ${{ toJSON(inputs.obfuscation) }}

  build_ios:
    name: "Build for iOS"
    needs: check
    if: (!cancelled() && !failure()) && inputs.run_build_ios

    runs-on: macos-13
    env:
      # https://github.com/actions/runner-images/blob/main/images/macos/macos-13-Readme.md#xcode
      DEVELOPER_DIR: "/Applications/Xcode_15.0.1.app/Contents/Developer"

    steps:
      - uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Build for iOS
        uses: ./.github/actions/build_ios
        with:
          obfuscation: ${{ toJSON(inputs.obfuscation) }}

  build_web:
    name: "Build for Web"
    needs: check
    if: (!cancelled() && !failure()) && inputs.run_build_web

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Build for Web
        uses: ./.github/actions/build_web

  build_windows:
    name: "Build for Windows"
    needs: check
    if: (!cancelled() && !failure()) && inputs.run_build_windows

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Build for Windows
        uses: ./.github/actions/build_windows

  build_linux:
    name: "Build for Linux"
    needs: check
    if: (!cancelled() && !failure()) && inputs.run_build_linux

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Build for Linux
        uses: ./.github/actions/build_linux

  build_macos:
    name: "Build for macOS"
    needs: check
    if: (!cancelled() && !failure()) && inputs.run_build_macos

    runs-on: macos-13
    env:
      # https://github.com/actions/runner-images/blob/main/images/macos/macos-13-Readme.md#xcode
      DEVELOPER_DIR: "/Applications/Xcode_15.0.1.app/Contents/Developer"

    steps:
      - uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Build for macOS
        uses: ./.github/actions/build_macos

  notify:
    name: "Notify"
    needs:
      - check
      - build_android
      - build_ios
      - build_web
      - build_windows
      - build_linux
      - build_macos
    if: always()

    runs-on: ubuntu-latest

    steps:
      - name: Assign
        id: assign
        run: |
          echo "slack_webhook_url=${{ secrets.SLACK_WEBHOOK_URL }}" >> $GITHUB_OUTPUT

      - name: Slack Payload
        id: slack_payload
        uses: actions/github-script@v7
        with:
          script: |
            const env = process.env;
            const needs = JSON.parse(env.NEEDS);
            const counts = Object.entries(needs).reduce((acc, curr) => {
              const [key, value] = curr;
              const result = value.result;
              acc[result] = acc[result] ? acc[result] + 1 : 1;
              return acc;
            }, {});
            const results = Object.entries(counts).map(([key, value]) => `${key}: ${value}`);
            const repository = `${context.repo.owner}/${context.repo.repo}`;
            const url = `${context.serverUrl}/${repository}/actions/runs/${context.runId}`;
            const texts = [
              `[${repository}] Run: ${context.workflow} - ${context.ref} (${context.sha})`,
              `${url}`,
              ...results
            ];
            const text = texts.join("\n");
            const color = counts["failure"] ? "danger" :  "good";
            const fields = [{
              "title": counts["failure"] ? "Failure" :  "Success"
            }];
            return {
              text, color, fields
            };
        env:
          NEEDS: ${{ toJSON(needs) }}

      - uses: slackapi/slack-github-action@v1.25.0
        if: steps.assign.outputs.slack_webhook_url != ''
        with:
          payload: ${{ steps.slack_payload.outputs.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ steps.assign.outputs.slack_webhook_url }}

  actions_timeline:
    name: "Actions Timeline"
    needs: notify
    if: always()

    runs-on: ubuntu-latest

    steps:
      - uses: Kesin11/actions-timeline@v2
